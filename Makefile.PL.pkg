

use ExtUtils::MakeMaker;
PDL::Core::Dev->import();

# This mess sorts out the Fortran availability - KGB.
# Depends on ExtUtils::F77

BEGIN {
   $msg = ""; $forcebuild=0;
   
#   if (defined $PDL_CONFIG{WITH_SLATEC} && $PDL_CONFIG{WITH_SLATEC}==0) {
#      $msg = "\n   Will skip build of PDL::Opt::NonLinear on this system   \n";
#      goto skip;
#   }
   
#   if (defined $PDL_CONFIG{WITH_SLATEC} && $PDL_CONFIG{WITH_SLATEC}==1) {
#      print "\n   Will forcibly try and build PDL::Opt::NonLinear on this system   \n\n";
#      $forcebuild=1;
#   }
   
#    if ($^O =~ /win32/i) {
#       $msg = "\n    Win32 systems not yet supported. Will not build PDL::Opt::NonLinear    \n";
#       goto skip unless $forcebuild;
#    }

   if (exists $PDL_CONFIG{F77CONF} && -f $PDL_CONFIG{F77CONF}) {
     print "loading F77 configuration from $PDL_CONFIG{F77CONF}...\n";
     eval "require '$PDL_CONFIG{F77CONF}'";
     if ($@ ne "") {
       $msg = "\n".$@.
	 "\n\tF77CONF file not loaded. Ought not build PDL::Opt::NonLinear\n" ;
       goto skip unless $forcebuild;
     }
     $f77 = 'F77Conf';
   } else {
     eval "use ExtUtils::F77";  # Might want "use ExtUtils::F77 qw(generic f2c)"
     if ($@ ne "") {
       $msg = "\n".$@.
	 "\n\tExtUtils::F77 module not found. Ought not build PDL::Opt::NonLinear\n" ;
       goto skip unless $forcebuild;
     } else {
       $f77 = 'ExtUtils::F77';
       print "(ExtUtils Version $ExtUtils::F77::VERSION)\n";
       if ($ExtUtils::F77::VERSION < 1.03 ) {
	 $msg = "\n\tneed a version of ExtUtils::F77 >= 1.03. Ought not build PDL::Opt::NonLinear\n" ;
	 goto skip unless $forcebuild;
       }
     }  # end if ($@ ne "")
   } # if (exists $PDL_CONFIG{F77CONF}...

   $compiler_available = $f77->testcompiler;

   if (!$compiler_available) {
      $msg = "\n   No f77 compiler found. Ought to skip PDL::Opt::NonLinear on this system    \n";
#      $PDL_CONFIG{WITH_SLATEC} = 0;
   } 
#   else {
#      $PDL_CONFIG{WITH_SLATEC} = 1;
#   }
        
   skip:
   
   if ($msg ne "" && $forcebuild==0) {
       warn $msg . "\n";
       $msg =~ s/\n//g;
       write_dummy_make( $msg );
       $donot = 1;
   } else {
   print "\n   Building PDL::Opt::NonLinear.\n\n";# Turn off WITH_SLATEC if there are any problems\n\n";
   }
}

return if $donot;


@pack = (["nonlinear.pd",NonLinear,PDL::Opt::NonLinear]);
@opti_libfiles = map {s/^opti_lib\///; s/\.f$//; $_} glob("opti_lib/*.f");

%hash = pdlpp_stdargs_int(@::pack);
$hash{OBJECT} .= " hooke.o ";
$hash{OBJECT} .= join '', map {" opti_lib/$_.o "} @opti_libfiles;
$hash{LIBS}[0] .= $f77->runtime ;
$hash{LIBS}[0] .= ' -L/usr/local/lib -lport -L/usr/lib/atlas -lf77blas -lcblas -latlas -lg2c ' ;
$hash{clean}{FILES} .= " f77_underscore" .
  join '', map {" opti_lib/$_.o "} @opti_libfiles;
$hash{clean}{FILES} .= " hooke.o ";

# Handle multiple compilers

$f2cbased = ($f77->runtime =~ /-lf2c/);
$g2cbased = ($f77->runtime =~ /-lg2c/) unless $f2cbased;
$trail = $f77->trail_;

# Create flag file according to whether or not to use
# underscores (pretty hacky)

unlink("f77_underscore") if -e "f77_underscore";
if ($trail) {
   open OUT, ">f77_underscore" or die "unable to write scratch file";
   close OUT;
}

WriteMakefile(
 %hash,
 VERSION_FROM => "",   # This is overridden by VERSION_FROM in %hash 
 VERSION => "0.01"
);

sub MY::postamble {
        $mycompiler     = $f77->compiler();
        $mycflags       = $f77->cflags();
	my $orig = pdlpp_postamble_int(@::pack);
	$orig =~ s/:\s*nonlinear\.pd/: nonlinear.pd/;
	$orig .join "\n",map {
("

opti_lib/$_\$(OBJ_EXT): opti_lib/$_.f 
	$mycompiler -c -o opti_lib/$_\$(OBJ_EXT) $mycflags opti_lib/$_.f
" )} @opti_libfiles;
 
}
